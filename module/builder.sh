source $stdenv/setup

modfile="$out/modules/$modName"
mkdir -p `dirname "$modfile"`

root=$buildInputs
cat > $modfile <<EOF
#%Module1.0#####################################################################
#
# Autogenerated nix $module
# 

set pkg $pkgName
set version $pkgVersion
set root $root

proc ModulesHelp { } {
    puts stderr "Sets the environment for nix-built \$pkg-\$version"
}

module-whatis   "Sets the environment for nix-built \$pkg-\$version"

EOF

if [[ $modLoad ]] ; then
	echo "module load $modLoad" >> $modfile
	echo "prereq $modLoad" >> $modfile
fi
if [[ $modPrereq ]] ; then
	echo "prereq $modPrereq" >> $modfile
fi
if [[ $modConflict ]] ; then
	echo "conflict $modConflict" >> $modfile
fi
if [[ $addPath && -d $root/bin ]] ; then
	echo 'prepend-path PATH $root/bin' >> $modfile
fi
if [[ $addManPath && -d $root/share/man ]] ; then
	echo 'prepend-path MANPATH $root/share/man' >> $modfile
fi
if [[ $addLDLibraryPath && -d $root/lib ]] ; then
	echo 'prepend-path LD_LIBRARY_PATH $root/lib' >> $modfile
fi
if [[ $addPkgConfigPath && -d $root/lib/pkgconfig ]] ; then
	echo 'prepend-path PKG_CONFIG_PATH $root/lib/pkgconfig' >> $modfile
fi
if [[ $addCCFlags && ( -d $root/include || -d $root/lib ) ]] ; then
	echo "prereq ${modPrefix}gcc" >> $modfile
	pfx="prepend-path -d \" \" NIX_${nixInfix}_"
	if [[ -d $root/include ]] ; then
		# nix uses -isystem but we'll just use -I
		echo $pfx'CFLAGS_COMPILE -I$root/include' >> $modfile
	fi
	if [[ -d $root/lib ]] ; then
		echo $pfx'LDFLAGS -L$root/lib' >> $modfile
	fi
fi
